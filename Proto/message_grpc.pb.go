// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: message.proto

package Distribuidos3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrokerRasputinClient is the client API for BrokerRasputin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerRasputinClient interface {
	DerivarConsulta(ctx context.Context, in *MensajeSimple, opts ...grpc.CallOption) (*Direccion, error)
	GetSoldados(ctx context.Context, in *DatosBase, opts ...grpc.CallOption) (*SoldadosBase, error)
	Finalizar(ctx context.Context, in *MensajeSimple, opts ...grpc.CallOption) (*MensajeSimple, error)
}

type brokerRasputinClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerRasputinClient(cc grpc.ClientConnInterface) BrokerRasputinClient {
	return &brokerRasputinClient{cc}
}

func (c *brokerRasputinClient) DerivarConsulta(ctx context.Context, in *MensajeSimple, opts ...grpc.CallOption) (*Direccion, error) {
	out := new(Direccion)
	err := c.cc.Invoke(ctx, "/grpc.BrokerRasputin/DerivarConsulta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerRasputinClient) GetSoldados(ctx context.Context, in *DatosBase, opts ...grpc.CallOption) (*SoldadosBase, error) {
	out := new(SoldadosBase)
	err := c.cc.Invoke(ctx, "/grpc.BrokerRasputin/GetSoldados", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerRasputinClient) Finalizar(ctx context.Context, in *MensajeSimple, opts ...grpc.CallOption) (*MensajeSimple, error) {
	out := new(MensajeSimple)
	err := c.cc.Invoke(ctx, "/grpc.BrokerRasputin/Finalizar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerRasputinServer is the server API for BrokerRasputin service.
// All implementations must embed UnimplementedBrokerRasputinServer
// for forward compatibility
type BrokerRasputinServer interface {
	DerivarConsulta(context.Context, *MensajeSimple) (*Direccion, error)
	GetSoldados(context.Context, *DatosBase) (*SoldadosBase, error)
	Finalizar(context.Context, *MensajeSimple) (*MensajeSimple, error)
	mustEmbedUnimplementedBrokerRasputinServer()
}

// UnimplementedBrokerRasputinServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerRasputinServer struct {
}

func (UnimplementedBrokerRasputinServer) DerivarConsulta(context.Context, *MensajeSimple) (*Direccion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivarConsulta not implemented")
}
func (UnimplementedBrokerRasputinServer) GetSoldados(context.Context, *DatosBase) (*SoldadosBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldados not implemented")
}
func (UnimplementedBrokerRasputinServer) Finalizar(context.Context, *MensajeSimple) (*MensajeSimple, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalizar not implemented")
}
func (UnimplementedBrokerRasputinServer) mustEmbedUnimplementedBrokerRasputinServer() {}

// UnsafeBrokerRasputinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerRasputinServer will
// result in compilation errors.
type UnsafeBrokerRasputinServer interface {
	mustEmbedUnimplementedBrokerRasputinServer()
}

func RegisterBrokerRasputinServer(s grpc.ServiceRegistrar, srv BrokerRasputinServer) {
	s.RegisterService(&BrokerRasputin_ServiceDesc, srv)
}

func _BrokerRasputin_DerivarConsulta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeSimple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerRasputinServer).DerivarConsulta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BrokerRasputin/DerivarConsulta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerRasputinServer).DerivarConsulta(ctx, req.(*MensajeSimple))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerRasputin_GetSoldados_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatosBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerRasputinServer).GetSoldados(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BrokerRasputin/GetSoldados",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerRasputinServer).GetSoldados(ctx, req.(*DatosBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerRasputin_Finalizar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeSimple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerRasputinServer).Finalizar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BrokerRasputin/Finalizar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerRasputinServer).Finalizar(ctx, req.(*MensajeSimple))
	}
	return interceptor(ctx, in, info, handler)
}

// BrokerRasputin_ServiceDesc is the grpc.ServiceDesc for BrokerRasputin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerRasputin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.BrokerRasputin",
	HandlerType: (*BrokerRasputinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DerivarConsulta",
			Handler:    _BrokerRasputin_DerivarConsulta_Handler,
		},
		{
			MethodName: "GetSoldados",
			Handler:    _BrokerRasputin_GetSoldados_Handler,
		},
		{
			MethodName: "Finalizar",
			Handler:    _BrokerRasputin_Finalizar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// ServidorPlanetarioClient is the client API for ServidorPlanetario service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServidorPlanetarioClient interface {
	AgregarBase(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*Reloj, error)
	RenombrarBase(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*Reloj, error)
	ActualizarValor(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*Reloj, error)
	BorrarBase(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*Reloj, error)
	Merge(ctx context.Context, in *MensajeMerge, opts ...grpc.CallOption) (*MensajeMerge, error)
	GetSoldados(ctx context.Context, in *DatosBase, opts ...grpc.CallOption) (*SoldadosBase, error)
	IniciarMerge(ctx context.Context, in *MensajeSimple, opts ...grpc.CallOption) (*MensajeSimple, error)
	Finalizar(ctx context.Context, in *MensajeSimple, opts ...grpc.CallOption) (*MensajeSimple, error)
}

type servidorPlanetarioClient struct {
	cc grpc.ClientConnInterface
}

func NewServidorPlanetarioClient(cc grpc.ClientConnInterface) ServidorPlanetarioClient {
	return &servidorPlanetarioClient{cc}
}

func (c *servidorPlanetarioClient) AgregarBase(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*Reloj, error) {
	out := new(Reloj)
	err := c.cc.Invoke(ctx, "/grpc.ServidorPlanetario/AgregarBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servidorPlanetarioClient) RenombrarBase(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*Reloj, error) {
	out := new(Reloj)
	err := c.cc.Invoke(ctx, "/grpc.ServidorPlanetario/RenombrarBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servidorPlanetarioClient) ActualizarValor(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*Reloj, error) {
	out := new(Reloj)
	err := c.cc.Invoke(ctx, "/grpc.ServidorPlanetario/ActualizarValor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servidorPlanetarioClient) BorrarBase(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*Reloj, error) {
	out := new(Reloj)
	err := c.cc.Invoke(ctx, "/grpc.ServidorPlanetario/BorrarBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servidorPlanetarioClient) Merge(ctx context.Context, in *MensajeMerge, opts ...grpc.CallOption) (*MensajeMerge, error) {
	out := new(MensajeMerge)
	err := c.cc.Invoke(ctx, "/grpc.ServidorPlanetario/Merge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servidorPlanetarioClient) GetSoldados(ctx context.Context, in *DatosBase, opts ...grpc.CallOption) (*SoldadosBase, error) {
	out := new(SoldadosBase)
	err := c.cc.Invoke(ctx, "/grpc.ServidorPlanetario/GetSoldados", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servidorPlanetarioClient) IniciarMerge(ctx context.Context, in *MensajeSimple, opts ...grpc.CallOption) (*MensajeSimple, error) {
	out := new(MensajeSimple)
	err := c.cc.Invoke(ctx, "/grpc.ServidorPlanetario/IniciarMerge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servidorPlanetarioClient) Finalizar(ctx context.Context, in *MensajeSimple, opts ...grpc.CallOption) (*MensajeSimple, error) {
	out := new(MensajeSimple)
	err := c.cc.Invoke(ctx, "/grpc.ServidorPlanetario/Finalizar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServidorPlanetarioServer is the server API for ServidorPlanetario service.
// All implementations must embed UnimplementedServidorPlanetarioServer
// for forward compatibility
type ServidorPlanetarioServer interface {
	AgregarBase(context.Context, *Peticion) (*Reloj, error)
	RenombrarBase(context.Context, *Peticion) (*Reloj, error)
	ActualizarValor(context.Context, *Peticion) (*Reloj, error)
	BorrarBase(context.Context, *Peticion) (*Reloj, error)
	Merge(context.Context, *MensajeMerge) (*MensajeMerge, error)
	GetSoldados(context.Context, *DatosBase) (*SoldadosBase, error)
	IniciarMerge(context.Context, *MensajeSimple) (*MensajeSimple, error)
	Finalizar(context.Context, *MensajeSimple) (*MensajeSimple, error)
	mustEmbedUnimplementedServidorPlanetarioServer()
}

// UnimplementedServidorPlanetarioServer must be embedded to have forward compatible implementations.
type UnimplementedServidorPlanetarioServer struct {
}

func (UnimplementedServidorPlanetarioServer) AgregarBase(context.Context, *Peticion) (*Reloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgregarBase not implemented")
}
func (UnimplementedServidorPlanetarioServer) RenombrarBase(context.Context, *Peticion) (*Reloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenombrarBase not implemented")
}
func (UnimplementedServidorPlanetarioServer) ActualizarValor(context.Context, *Peticion) (*Reloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActualizarValor not implemented")
}
func (UnimplementedServidorPlanetarioServer) BorrarBase(context.Context, *Peticion) (*Reloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrarBase not implemented")
}
func (UnimplementedServidorPlanetarioServer) Merge(context.Context, *MensajeMerge) (*MensajeMerge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merge not implemented")
}
func (UnimplementedServidorPlanetarioServer) GetSoldados(context.Context, *DatosBase) (*SoldadosBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldados not implemented")
}
func (UnimplementedServidorPlanetarioServer) IniciarMerge(context.Context, *MensajeSimple) (*MensajeSimple, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IniciarMerge not implemented")
}
func (UnimplementedServidorPlanetarioServer) Finalizar(context.Context, *MensajeSimple) (*MensajeSimple, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalizar not implemented")
}
func (UnimplementedServidorPlanetarioServer) mustEmbedUnimplementedServidorPlanetarioServer() {}

// UnsafeServidorPlanetarioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServidorPlanetarioServer will
// result in compilation errors.
type UnsafeServidorPlanetarioServer interface {
	mustEmbedUnimplementedServidorPlanetarioServer()
}

func RegisterServidorPlanetarioServer(s grpc.ServiceRegistrar, srv ServidorPlanetarioServer) {
	s.RegisterService(&ServidorPlanetario_ServiceDesc, srv)
}

func _ServidorPlanetario_AgregarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peticion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServidorPlanetarioServer).AgregarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServidorPlanetario/AgregarBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServidorPlanetarioServer).AgregarBase(ctx, req.(*Peticion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServidorPlanetario_RenombrarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peticion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServidorPlanetarioServer).RenombrarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServidorPlanetario/RenombrarBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServidorPlanetarioServer).RenombrarBase(ctx, req.(*Peticion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServidorPlanetario_ActualizarValor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peticion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServidorPlanetarioServer).ActualizarValor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServidorPlanetario/ActualizarValor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServidorPlanetarioServer).ActualizarValor(ctx, req.(*Peticion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServidorPlanetario_BorrarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peticion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServidorPlanetarioServer).BorrarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServidorPlanetario/BorrarBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServidorPlanetarioServer).BorrarBase(ctx, req.(*Peticion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServidorPlanetario_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeMerge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServidorPlanetarioServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServidorPlanetario/Merge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServidorPlanetarioServer).Merge(ctx, req.(*MensajeMerge))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServidorPlanetario_GetSoldados_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatosBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServidorPlanetarioServer).GetSoldados(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServidorPlanetario/GetSoldados",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServidorPlanetarioServer).GetSoldados(ctx, req.(*DatosBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServidorPlanetario_IniciarMerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeSimple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServidorPlanetarioServer).IniciarMerge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServidorPlanetario/IniciarMerge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServidorPlanetarioServer).IniciarMerge(ctx, req.(*MensajeSimple))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServidorPlanetario_Finalizar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeSimple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServidorPlanetarioServer).Finalizar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServidorPlanetario/Finalizar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServidorPlanetarioServer).Finalizar(ctx, req.(*MensajeSimple))
	}
	return interceptor(ctx, in, info, handler)
}

// ServidorPlanetario_ServiceDesc is the grpc.ServiceDesc for ServidorPlanetario service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServidorPlanetario_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ServidorPlanetario",
	HandlerType: (*ServidorPlanetarioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgregarBase",
			Handler:    _ServidorPlanetario_AgregarBase_Handler,
		},
		{
			MethodName: "RenombrarBase",
			Handler:    _ServidorPlanetario_RenombrarBase_Handler,
		},
		{
			MethodName: "ActualizarValor",
			Handler:    _ServidorPlanetario_ActualizarValor_Handler,
		},
		{
			MethodName: "BorrarBase",
			Handler:    _ServidorPlanetario_BorrarBase_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _ServidorPlanetario_Merge_Handler,
		},
		{
			MethodName: "GetSoldados",
			Handler:    _ServidorPlanetario_GetSoldados_Handler,
		},
		{
			MethodName: "IniciarMerge",
			Handler:    _ServidorPlanetario_IniciarMerge_Handler,
		},
		{
			MethodName: "Finalizar",
			Handler:    _ServidorPlanetario_Finalizar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
